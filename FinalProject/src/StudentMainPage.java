
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author casper
 */
public class StudentMainPage extends javax.swing.JFrame {

    private static int studentId;
    
    private static String username;
    
    DefaultTableModel model;
    
    Operations operations = new Operations();
   
    public StudentMainPage(int studentId, String username) {
        initComponents();
        
        this.studentId = studentId;
        this. username = username;
        
        model = (DefaultTableModel) target_table.getModel();
        
        top_text.setText("Welcome, "+ username);
        loadTargets();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        top_text = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        target_table = new javax.swing.JTable();
        upload_question_button = new javax.swing.JButton();
        logout_button = new javax.swing.JButton();
        change_target_button = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        solve_question = new javax.swing.JButton();
        view_progress_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        target_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course", "Target", "Remaining"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(target_table);

        upload_question_button.setText("Upload Question");
        upload_question_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_question_buttonActionPerformed(evt);
            }
        });

        logout_button.setText("Logout");
        logout_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_buttonActionPerformed(evt);
            }
        });

        change_target_button.setText("Change Target");
        change_target_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change_target_buttonActionPerformed(evt);
            }
        });

        solve_question.setText("Solve Question");
        solve_question.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solve_questionActionPerformed(evt);
            }
        });

        view_progress_button.setText("View Progress");
        view_progress_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_progress_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(top_text, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(upload_question_button)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(view_progress_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(change_target_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(solve_question, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout_button)
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(top_text, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(solve_question)
                        .addGap(18, 18, 18)
                        .addComponent(change_target_button)
                        .addGap(18, 18, 18)
                        .addComponent(view_progress_button)
                        .addGap(31, 31, 31)
                        .addComponent(upload_question_button))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logout_button)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(51, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void change_target_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_target_buttonActionPerformed

      
          int selectedRow = target_table.getSelectedRow();
      
        if (selectedRow == -1) {
            
            if(model.getRowCount() == 0){
                message.setText("Targets table is empty.");
            }
            
            else{
                message.setText("Please select row for update its target.");
            }
            
        }

        else{
            // we must be ensure the table's edited value is committed
            if (target_table.isEditing()) {
            target_table.getCellEditor().stopCellEditing();
        }
        String courseName = (String) model.getValueAt(selectedRow, 0);
        int newTarget = Integer.parseInt(model.getValueAt(selectedRow, 1).toString());
        
        
        if (newTarget != 0) {
            operations.changeTarget(studentId,courseName, newTarget);
            
            loadTargets();
            
            message.setText("Target updated successfully.");
        } 
        }
    }//GEN-LAST:event_change_target_buttonActionPerformed

    private void logout_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_buttonActionPerformed

        setVisible(false);
        new EntryPage().setVisible(true);
    }//GEN-LAST:event_logout_buttonActionPerformed

    private void upload_question_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_question_buttonActionPerformed

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));

    
    int returnValue = fileChooser.showOpenDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String filePath = selectedFile.getAbsolutePath();
        
        // Save the file to a specific directory and get the relative path
        String relativePath = saveFileToServer(selectedFile);
        
        // Get courseid from the table for uploadquestion method ????????
        int selectedRow = target_table.getSelectedRow();
        if (selectedRow != -1) {
            String courseName = (String) model.getValueAt(selectedRow, 0);
            int courseId = operations.getCourseIdByName(courseName);
            
            // to database
            operations.uploadQuestion(studentId, courseId, relativePath);
            
            message.setText("Question uploaded successfully.");
        } else {
            message.setText("Please select a course first.");
        }
    }//GEN-LAST:event_upload_question_buttonActionPerformed

    }
    
    
    private void solve_questionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solve_questionActionPerformed

        int selectedRow = target_table.getSelectedRow();
        if (selectedRow != -1) {
            String courseName = (String) target_table.getValueAt(selectedRow, 0);
            int remaining = (int) target_table.getValueAt(selectedRow, 2);

            String input = JOptionPane.showInputDialog(this, "Enter the number of solved questions:");
            if (input != null && !input.isEmpty()) {
                
                try {
                    int solvedQuestions = Integer.parseInt(input);
                    int newRemaining = remaining - solvedQuestions;
                    
                    if (newRemaining < 0){
                        operations.updateRemainingQuestions(studentId, courseName, 0);
                        JOptionPane.showMessageDialog(this, "You exceeded your goal!");
                        loadTargets();
                    }
                    
                    else {

                    operations.updateRemainingQuestions(studentId, courseName, newRemaining);

                    loadTargets();
                    JOptionPane.showMessageDialog(this, "Remaining questions updated successfully!");
                    }
                    
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid number.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a course to update.");
        }
        
    }//GEN-LAST:event_solve_questionActionPerformed

    private void view_progress_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_progress_buttonActionPerformed

        int selectedRow = target_table.getSelectedRow();
        if (selectedRow != -1) {
            

            double progress = 100 - (((double) ((Integer)target_table.getValueAt(selectedRow, 2)) / (double) ((Integer)target_table.getValueAt(selectedRow, 1))) * 100);
            int progressPercentage = (int) progress;
            
            JOptionPane.showMessageDialog(this, new JProgressBar(0, 100) {{
                setValue(progressPercentage);
                setStringPainted(true);
            }}, target_table.getValueAt(selectedRow, 0) + " progress", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a course to view progress.");
        }
    
    }//GEN-LAST:event_view_progress_buttonActionPerformed
          
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentMainPage(studentId,username).setVisible(true);
            }
        });
    }
    
    
    private void loadTargets() {
        List <Target> targets = new ArrayList<>();
        
        targets = operations.getTargetsForStudent(studentId);
        
        model.setRowCount(0);  
        
        if(targets != null){
            
        for (Target target : targets) {
            model.addRow(new Object[]{target.getCourseName(), target.getTarget(), target.getRemaining()});
        }
        
        }
    }
    
    
    private String saveFileToServer(File file) {
    // Defining server directory to save the file
    String serverDirectory = "C:\\Users\\casper\\Downloads";
    File serverFile = new File(serverDirectory + file.getName());
    
    try {
        Files.copy(file.toPath(), serverFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
    } catch (IOException e) {
        e.printStackTrace();
    }
    
    return serverFile.getName(); // Return relative path
}
    
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton change_target_button;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton logout_button;
    private javax.swing.JLabel message;
    private javax.swing.JButton solve_question;
    private javax.swing.JTable target_table;
    private javax.swing.JLabel top_text;
    private javax.swing.JButton upload_question_button;
    private javax.swing.JButton view_progress_button;
    // End of variables declaration//GEN-END:variables
}
